// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: CEMM.proto

package cemm

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CEMM_Get_FullMethodName           = "/CEMM.CEMM/get"
	CEMM_Add_FullMethodName           = "/CEMM.CEMM/add"
	CEMM_GetOrIncRound_FullMethodName = "/CEMM.CEMM/getOrIncRound"
	CEMM_InitTagSets_FullMethodName   = "/CEMM.CEMM/initTagSets"
	CEMM_InitEDB_FullMethodName       = "/CEMM.CEMM/initEDB"
)

// CEMMClient is the client API for CEMM service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CEMMClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetReply], error)
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetOrIncRound(ctx context.Context, in *RoundRequest, opts ...grpc.CallOption) (*RoundReply, error)
	InitTagSets(ctx context.Context, in *InitTagSetsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	InitEDB(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[InitEDBRequest, emptypb.Empty], error)
}

type cEMMClient struct {
	cc grpc.ClientConnInterface
}

func NewCEMMClient(cc grpc.ClientConnInterface) CEMMClient {
	return &cEMMClient{cc}
}

func (c *cEMMClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CEMM_ServiceDesc.Streams[0], CEMM_Get_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetRequest, GetReply]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CEMM_GetClient = grpc.ServerStreamingClient[GetReply]

func (c *cEMMClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CEMM_Add_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cEMMClient) GetOrIncRound(ctx context.Context, in *RoundRequest, opts ...grpc.CallOption) (*RoundReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoundReply)
	err := c.cc.Invoke(ctx, CEMM_GetOrIncRound_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cEMMClient) InitTagSets(ctx context.Context, in *InitTagSetsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CEMM_InitTagSets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cEMMClient) InitEDB(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[InitEDBRequest, emptypb.Empty], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CEMM_ServiceDesc.Streams[1], CEMM_InitEDB_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[InitEDBRequest, emptypb.Empty]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CEMM_InitEDBClient = grpc.ClientStreamingClient[InitEDBRequest, emptypb.Empty]

// CEMMServer is the server API for CEMM service.
// All implementations must embed UnimplementedCEMMServer
// for forward compatibility.
type CEMMServer interface {
	Get(*GetRequest, grpc.ServerStreamingServer[GetReply]) error
	Add(context.Context, *AddRequest) (*emptypb.Empty, error)
	GetOrIncRound(context.Context, *RoundRequest) (*RoundReply, error)
	InitTagSets(context.Context, *InitTagSetsRequest) (*emptypb.Empty, error)
	InitEDB(grpc.ClientStreamingServer[InitEDBRequest, emptypb.Empty]) error
	mustEmbedUnimplementedCEMMServer()
}

// UnimplementedCEMMServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCEMMServer struct{}

func (UnimplementedCEMMServer) Get(*GetRequest, grpc.ServerStreamingServer[GetReply]) error {
	return status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedCEMMServer) Add(context.Context, *AddRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedCEMMServer) GetOrIncRound(context.Context, *RoundRequest) (*RoundReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrIncRound not implemented")
}
func (UnimplementedCEMMServer) InitTagSets(context.Context, *InitTagSetsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitTagSets not implemented")
}
func (UnimplementedCEMMServer) InitEDB(grpc.ClientStreamingServer[InitEDBRequest, emptypb.Empty]) error {
	return status.Errorf(codes.Unimplemented, "method InitEDB not implemented")
}
func (UnimplementedCEMMServer) mustEmbedUnimplementedCEMMServer() {}
func (UnimplementedCEMMServer) testEmbeddedByValue()              {}

// UnsafeCEMMServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CEMMServer will
// result in compilation errors.
type UnsafeCEMMServer interface {
	mustEmbedUnimplementedCEMMServer()
}

func RegisterCEMMServer(s grpc.ServiceRegistrar, srv CEMMServer) {
	// If the following call pancis, it indicates UnimplementedCEMMServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CEMM_ServiceDesc, srv)
}

func _CEMM_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CEMMServer).Get(m, &grpc.GenericServerStream[GetRequest, GetReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CEMM_GetServer = grpc.ServerStreamingServer[GetReply]

func _CEMM_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CEMMServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CEMM_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CEMMServer).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CEMM_GetOrIncRound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CEMMServer).GetOrIncRound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CEMM_GetOrIncRound_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CEMMServer).GetOrIncRound(ctx, req.(*RoundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CEMM_InitTagSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitTagSetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CEMMServer).InitTagSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CEMM_InitTagSets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CEMMServer).InitTagSets(ctx, req.(*InitTagSetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CEMM_InitEDB_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CEMMServer).InitEDB(&grpc.GenericServerStream[InitEDBRequest, emptypb.Empty]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CEMM_InitEDBServer = grpc.ClientStreamingServer[InitEDBRequest, emptypb.Empty]

// CEMM_ServiceDesc is the grpc.ServiceDesc for CEMM service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CEMM_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CEMM.CEMM",
	HandlerType: (*CEMMServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "add",
			Handler:    _CEMM_Add_Handler,
		},
		{
			MethodName: "getOrIncRound",
			Handler:    _CEMM_GetOrIncRound_Handler,
		},
		{
			MethodName: "initTagSets",
			Handler:    _CEMM_InitTagSets_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "get",
			Handler:       _CEMM_Get_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "initEDB",
			Handler:       _CEMM_InitEDB_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "CEMM.proto",
}
